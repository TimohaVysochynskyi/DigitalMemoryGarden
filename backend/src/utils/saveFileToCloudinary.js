import cloudinary from 'cloudinary';
import fs from 'node:fs/promises';

import { env } from './env.js';
import { CLOUDINARY } from '../constants/index.js';

cloudinary.v2.config({
  secure: true,
  cloud_name: env(CLOUDINARY.CLOUD_NAME),
  api_key: env(CLOUDINARY.API_KEY),
  api_secret: env(CLOUDINARY.API_SECRET),
});

export const saveFileToCloudinary = async (file, folder) => {
  try {
    console.log(`‚òÅÔ∏è Uploading file to Cloudinary folder: ${folder}`);
    console.log(`üîß File details:`, {
      filename: file.filename,
      originalname: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
    });

    const uploadOptions = {
      folder: folder, // –ü–∞–ø–∫–∞ –≤ Cloudinary
      resource_type: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å—É (image, video, raw)
      public_id: file.filename.split('.')[0], // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–∫ public_id
    };

    console.log(`‚òÅÔ∏è Uploading from: ${file.path}`);

    const response = await cloudinary.v2.uploader.upload(
      file.path,
      uploadOptions,
    );

    // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await fs.unlink(file.path);

    console.log(
      `‚úÖ File uploaded successfully to Cloudinary: ${response.secure_url}`,
    );

    return response.secure_url;
  } catch (error) {
    console.error(`‚ùå Error uploading file to Cloudinary:`, error);

    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –Ω–∞–≤—ñ—Ç—å —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    try {
      await fs.unlink(file.path);
    } catch (unlinkError) {
      console.error(`‚ùå Error deleting temp file:`, unlinkError);
    }

    throw error;
  }
};
